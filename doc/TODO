Load into DB
-- Match business_id to actual id foreign key on import

Display data:
* Display every restaurant in the DB on the map
* Allow user to select one, and display the inspection data

Search UI:
* Django Form for letting the user search the database by restaurant name
* Display returned restaurants by address on map

Location Search:
* Allow searching within a specific radius


Clean-up Items:
* Skeleton should only contain items which appear on every page in site
-- other items should be in base


Long term
----------
* Mobile friendly
-- Twitter Bootstrap?

* Initial location based on user location (browser or IP)

* Add other cities: Chicago, DC

* Setup local development environments

* Add GUI attribution for dataset (San Francisco is licensed CC BY SA)

* Import data from both businesses.csv and businesses_plus.csv, or figure out why
  they are different.

* Make access to Restaurant data more pythonic with facade pattern
-- Create a foodcheck_classes module
-- Create a Restaurant class with methods that know how to access all
inspections and violations for that restaurant

# Fix data download script

* Data import as a cron job:
-- Install django-chronograph (https://bitbucket.org/wnielson/django-chronograph/)
-- Configure django-chronograph to kick-off admin management command to import
-- OpenShift cron cartridge for scheduled jobs--can't use on scalable app
++++ Kick off job from a different server using `rhc ssh "manage.py cron"`
* Update script to download into openshift perstent data folder?
-- Use the os.env['OPENSHIFT_DATA'](?) environment variable to find the data folder
-- This is repo/../data not repo/data/data_dumps
* Or keep doing on dev machine and checking into source control?
-- Dumps are data not code, should have a different backup strategy

* Import into DB other fields from download (owner name and address)?

* Notification if a specific restaurante fails an inspection

* Foursquare checkin to alert on violation

* Make CLEAN_DB actually clean the DB (remove unnecessary tables)
-- Probably need it to relead a DB schema with GIS stuff
-- And south stuff

* Backup the database (psql dump over SSH)

* Set admin email and debug email to a team mailing list

* Blob store or shared storage for uploaded files

* Use mongo for recording history of queries / what people search?

* Allow ratings and comments?

* Add foodcheck_app tables to admin interface for GUI management

* redirect http//---/admin to https
